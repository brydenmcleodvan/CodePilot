// Firestore Security Rules for Healthmap
// Copy these rules to your Firebase Console > Firestore Database > Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for authentication and authorization
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
             (request.auth.token.role == role || 
              request.auth.token.get('role', '') == role);
    }
    
    function isAdmin() {
      return hasRole('admin');
    }
    
    function isProvider() {
      return hasRole('provider') || isAdmin();
    }
    
    function isPremiumUser() {
      return hasRole('premium') || hasRole('pro') || isProvider();
    }

    // User profiles - users can only access their own data
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow read: if isProvider(); // Providers can read user profiles
      allow read, write: if isAdmin(); // Admins have full access
    }

    // Support tickets - strict user isolation
    match /support_tickets/{ticketId} {
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid;
      allow read: if isAuthenticated() && 
                 (resource.data.userId == request.auth.uid || 
                  isProvider() || isAdmin());
      allow update: if isProvider() || isAdmin();
      allow delete: if isAdmin();
    }

    // Feature logs - users can only create and read their own
    match /feature_logs/{logId} {
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid;
      allow read: if isAuthenticated() && 
                 (resource.data.userId == request.auth.uid || isAdmin());
      allow read, write: if isAdmin(); // Admins can access all logs
    }

    // User analytics summary - protected personal data
    match /user_analytics_summary/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow write: if false; // Only server can write via admin SDK
      allow read, write: if isAdmin();
    }

    // Health data - highly sensitive, strict access control
    match /health_data/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow read: if isProvider() && 
                 exists(/databases/$(database)/documents/provider_access/$(request.auth.uid)/patients/$(userId));
      allow read: if isAdmin();
    }

    // Health metrics - personal health tracking data
    match /health_metrics/{userId}/entries/{entryId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow read: if isProvider() && 
                 exists(/databases/$(database)/documents/provider_access/$(request.auth.uid)/patients/$(userId));
    }

    // Medication tracking - sensitive medical data
    match /medications/{userId}/entries/{entryId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow read: if isProvider() && 
                 exists(/databases/$(database)/documents/provider_access/$(request.auth.uid)/patients/$(userId));
    }

    // Symptom logs - private health information
    match /symptoms/{userId}/entries/{entryId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow read: if isProvider() && 
                 exists(/databases/$(database)/documents/provider_access/$(request.auth.uid)/patients/$(userId));
    }

    // Journal entries - personal health journals
    match /journal_entries/{userId}/entries/{entryId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow read: if isProvider() && 
                 exists(/databases/$(database)/documents/provider_access/$(request.auth.uid)/patients/$(userId));
    }

    // Onboarding progress - user-specific setup data
    match /onboarding_progress/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow read: if isAdmin();
    }

    // Email queue - server-only operations
    match /email_queue/{emailId} {
      allow read, write: if false; // Only server can access via admin SDK
    }

    // Provider access control - manages doctor-patient relationships
    match /provider_access/{providerId}/patients/{userId} {
      allow read, write: if isAuthenticated() && isOwner(providerId) && isProvider();
      allow read: if isAdmin();
    }

    // Subscription data - billing and plan information
    match /subscriptions/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow write: if false; // Only server can write subscription data
      allow read, write: if isAdmin();
    }

    // Admin analytics - aggregated business data
    match /admin_analytics/{document=**} {
      allow read, write: if isAdmin();
    }

    // System configuration - admin-only settings
    match /system_config/{document=**} {
      allow read, write: if isAdmin();
    }

    // App feedback and ratings - users can submit, admins can read
    match /app_feedback/{feedbackId} {
      allow create: if isAuthenticated();
      allow read: if isAdmin();
      allow update: if isAdmin(); // For marking as addressed
    }

    // Telehealth sessions - secure consultation data
    match /telehealth_sessions/{sessionId} {
      allow read, write: if isAuthenticated() && 
                         (resource.data.patientId == request.auth.uid || 
                          resource.data.providerId == request.auth.uid);
      allow read, write: if isAdmin();
    }

    // Default deny rule - security by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}